<h1 class="page-title">Create a new BeRead</h1>

<%= form_with(model: @be_read, local: true, multipart: true, html: { id: "be-read-form" }) do |form| %>
  <div class="selfie-container" data-controller="webcam" style="max-width:400px; margin:auto; text-align:center;">

    <!-- Camera Stream -->
    <video data-webcam-target="video" autoplay playsinline muted
           style="width:100%; background:black; border:2px solid #862221; border-radius:12px;"></video>

    <!-- Canvas -->
    <canvas data-webcam-target="canvas" style="display:none;"></canvas>

    <!-- Image Preview -->
    <img data-webcam-target="preview" alt="Captured preview"
         style="display:none; width:100%; border-radius:12px; margin-top:15px;" />

    <!-- Caption Input -->
    <div style="margin-top:15px;">
      <%= form.label :caption, "Your message", class: "form-label" %><br>
      <%= form.text_field :caption, class: "form-control", style: "width:100%;" %>
    </div>

    <!-- Hidden field to hold photo -->
    <%= form.hidden_field :photo_data, data: { webcam_target: "photoInput" } %>

    <!-- Capture Button -->
    <button type="button" class="btn capture-btn"
            data-action="click->webcam#capture"
            data-webcam-target="captureButton"
            style="margin-top:10px;">
      ðŸ“¸ Take photo
    </button>

    <!-- Submit Button -->
    <div style="margin-top:20px;">
      <%= form.submit "Send my BeRead",
                      disabled: true,
                      class: "btn-primary",
                      data: { webcam_target: "submitButton" } %>
    </div>

    <!-- Notification -->
    <div data-webcam-target="notification"
         style="display:none; position:fixed; top:20px; left:50%; transform:translateX(-50%);
                background:#4caf50; color:#fff; padding:16px 24px; border-radius:30px;
                opacity:0; transition:opacity .6s; z-index:1000; font-size:16px; font-weight:bold;">
      ðŸ“¸ Photo captured!
    </div>
  </div>
<% end %>

<!-- Go to Feed Button -->
<div style="text-align: center; margin-top: 30px;">
  <%= link_to "Go to Feed", feed_path, class: "btn-primary" %>
</div>

<!-- Styles -->
<style>
  .btn-primary {
    background: #862221;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 6px;
    font-size: 16px;
    text-decoration: none;
    display: inline-block;
  }

  .capture-btn {
    background: #862221;
    color: #fff;
    padding: 12px 20px;
    border: none;
    border-radius: 8px;
    font-size: 16px;
  }

  .capture-btn:hover {
    background: #6b1c1b;
  }

  .btn-primary:hover {
    background: #6b1c1b;
  }

  .btn-primary:disabled,
  .capture-btn:disabled {
    cursor: not-allowed;
    opacity: 0.6;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.querySelector("[data-controller='webcam']")

    if (!container) return;

    const video = container.querySelector("[data-webcam-target='video']")
    const canvas = container.querySelector("[data-webcam-target='canvas']")
    const preview = container.querySelector("[data-webcam-target='preview']")
    const photoInput = container.querySelector("[data-webcam-target='photoInput']")
    const captureButton = container.querySelector("[data-webcam-target='captureButton']")
    const submitButton = container.querySelector("[data-webcam-target='submitButton']")
    const notification = container.querySelector("[data-webcam-target='notification']")

    let stream = null

    async function startCamera() {
      try {
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          alert("Your browser does not support camera access.")
          return
        }

        stream = await navigator.mediaDevices.getUserMedia({ video: true })
        video.srcObject = stream
        video.style.display = "block"
        preview.style.display = "none"

        captureButton.disabled = false
        captureButton.style.cursor = "pointer"
        submitButton.disabled = true
        submitButton.style.opacity = "0.6"
      } catch (error) {
        alert("ðŸš« Unable to access camera: " + error.message)
        console.error(error)
      }
    }

    function stopCamera() {
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
        stream = null
      }
    }

    function showNotification(message) {
      notification.textContent = message
      notification.style.display = "block"
      notification.style.opacity = "1"

      setTimeout(() => {
        notification.style.opacity = "0"
        setTimeout(() => {
          notification.style.display = "none"
        }, 600)
      }, 1800)
    }

    function capturePhoto() {
      if (!video.videoWidth || !video.videoHeight) {
        alert("Camera not ready yet.")
        return
      }

      canvas.width = video.videoWidth
      canvas.height = video.videoHeight
      const ctx = canvas.getContext("2d")
      ctx.drawImage(video, 0, 0)

      const dataURL = canvas.toDataURL("image/jpeg")
      photoInput.value = dataURL
      preview.src = dataURL
      preview.style.display = "block"

      showNotification("ðŸ“¸ Photo captured!")

      submitButton.disabled = false
      submitButton.style.opacity = "1"

      captureButton.disabled = true
      captureButton.style.cursor = "not-allowed"
      video.style.display = "none"

      stopCamera()
    }

    captureButton.addEventListener("click", capturePhoto)
    startCamera()

    window.addEventListener("beforeunload", stopCamera)
  })
</script>
