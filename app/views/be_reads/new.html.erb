<h1 class="page-title">Create a new BeRead</h1>

<%= form_with(model: @be_read, local: true, html: { multipart: true, class: "be-read-form" }) do |form| %>
  <div class="selfie-container" style="text-align:center; max-width: 400px; margin: auto;">
    <video id="be-read-video" autoplay playsinline
           style="width:100%; border-radius:12px; border:2px solid #862221; background:black;">
    </video>

    <canvas id="be-read-canvas" style="display:none;"></canvas>

    <div class="form-group" style="margin-top:15px;">
      <%= form.label :text, "Your message", style: "font-weight:bold;" %><br>
      <%= form.text_field :text, placeholder: "Write your message...", class: "form-control", style: "width:100%; padding:8px; border-radius:6px; border:1px solid #ccc;" %>
    </div>

    <div class="form-group" style="margin-top:15px;">
      <%= form.label :book_id, "Select a Book", style: "font-weight:bold;" %><br>
      <%= form.collection_select :book_id, @books, :id, :title,
            prompt: "Choose a book",
            selected: @be_read.book_id,
            class: "form-control",
            style: "width:100%; padding:8px; border-radius:6px; border:1px solid #ccc;" %>
    </div>

    <%= form.hidden_field :photo_data, id: "be-read-photo-input" %>

    <button type="button" id="be-read-capture" class="capture-button"
            style="margin-top:10px; background-color:#862221; color:white; padding:12px 20px; font-size:18px; border:none; border-radius:8px; cursor:pointer; box-shadow:0 3px 6px rgba(0,0,0,0.2); transition:background-color .3s;">
      ðŸ“¸ Take photo
    </button>

    <div style="margin-top:20px;">
      <%= form.submit "Send my BeRead", class: "submit-button", disabled: true, id: "submit-button",
            style: "background-color:#862221; color:white; padding:12px 24px; font-size:18px; border:none; border-radius:8px; cursor:pointer; opacity:0.5; transition:opacity .3s;" %>
    </div>
  </div>
<% end %>

<div id="photo-notification" class="photo-notification" style="display:none;">ðŸ“¸ Photo captured!</div>

<style>
  .photo-notification {
    position: fixed;
    top: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #4caf50;
    color: white;
    padding: 12px 24px;
    border-radius: 30px;
    font-size: 18px;
    font-weight: 600;
    box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    opacity: 1;
    transition: opacity 0.6s ease;
    z-index: 10000;
    user-select: none;
  }

  .submit-button:disabled {
    cursor: not-allowed;
  }

  .capture-button:hover:not(:disabled) {
    background-color: #6b1c1b;
  }
</style>

<script>
  document.addEventListener("turbo:load", () => {
    const video = document.getElementById("be-read-video");
    const canvas = document.getElementById("be-read-canvas");
    const photoInput = document.getElementById("be-read-photo-input");
    const captureButton = document.getElementById("be-read-capture");
    const submitButton = document.getElementById("submit-button");
    const notification = document.getElementById("photo-notification");

    if (!video || !canvas || !photoInput || !captureButton || !submitButton) {
      console.warn("BeRead camera elements missing. Skipping setup.");
      return;
    }

    let stream = null;

    navigator.mediaDevices.getUserMedia({ video: true })
      .then(mediaStream => {
        stream = mediaStream;
        video.srcObject = stream;
        video.play();
      })
      .catch(err => {
        alert("Camera access error: " + err.message);
      });

    function showNotification(msg) {
      notification.textContent = msg;
      notification.style.display = "block";
      notification.style.opacity = "1";
      setTimeout(() => {
        notification.style.opacity = "0";
        setTimeout(() => notification.style.display = "none", 600);
      }, 1800);
    }

    captureButton.addEventListener("click", () => {
      if (!video.videoWidth || !video.videoHeight) {
        alert("Wait for camera to load...");
        return;
      }

      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext("2d");
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      const dataURL = canvas.toDataURL("image/jpeg");
      photoInput.value = dataURL;

      showNotification("ðŸ“¸ Photo captured!");
      submitButton.disabled = false;
      submitButton.style.opacity = "1";

      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
      }

      video.style.display = "none";
      captureButton.disabled = true;
      captureButton.style.cursor = "not-allowed";
    });

    document.querySelector("form").addEventListener("submit", event => {
      if (!photoInput.value) {
        event.preventDefault();
        showNotification("ðŸ“¸ Please take a photo before sending.");
        return;
      }

      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        stream = null;
      }

      submitButton.disabled = true;
      submitButton.style.opacity = "0.5";
    });
  });
</script>
